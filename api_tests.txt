# P2P Bolivia MVP - Comandos de Prueba de APIs
# Ejecutar estos comandos curl en orden para probar todos los endpoints del backend

# ================================
# 1. PRUEBAS DE AUTENTICACIÓN
# ================================

echo "=== PROBANDO AUTENTICACIÓN ==="

# 1.1 Registrar nuevo usuario
echo "1.1 Registrando nuevo usuario..."
curl -X POST http://localhost:8080/api/v1/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "usuarioprueba@ejemplo.com",
    "password": "contraseña123",
    "firstName": "Juan",
    "lastName": "Pérez",
    "phone": "+591 70000000"
  }' | jq .

# 1.2 Iniciar sesión con el usuario (guardar el token)
echo -e "\n1.2 Iniciando sesión..."
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v1/login \
  -H "Content-Type: application/json" \
  -d '{
    "username": "usuarioprueba@ejemplo.com",
    "password": "contraseña123"
  }')

echo $LOGIN_RESPONSE | jq .

# Extraer token (paso manual - copiar access_token de la respuesta anterior)
# Reemplazar TU_TOKEN_DE_ACCESO abajo con el token real de la respuesta de login
TOKEN="TU_TOKEN_DE_ACCESO"

# 1.3 Obtener perfil de usuario
echo -e "\n1.3 Obteniendo perfil de usuario..."
curl -X GET http://localhost:8080/api/v1/me \
  -H "Authorization: Bearer $TOKEN" | jq .

# ================================
# 2. PRUEBAS DE BILLETERA
# ================================

echo -e "\n=== PROBANDO SERVICIO DE BILLETERA ==="

# 2.1 Obtener todas las billeteras
echo "2.1 Obteniendo todas las billeteras..."
curl -X GET http://localhost:8080/api/v1/wallets \
  -H "Authorization: Bearer $TOKEN" | jq .

# 2.2 Obtener billetera específica (BOB)
echo -e "\n2.2 Obteniendo billetera BOB..."
curl -X GET http://localhost:8080/api/v1/wallets/BOB \
  -H "Authorization: Bearer $TOKEN" | jq .

# 2.3 Obtener billetera específica (USD)
echo -e "\n2.3 Obteniendo billetera USD..."
curl -X GET http://localhost:8080/api/v1/wallets/USD \
  -H "Authorization: Bearer $TOKEN" | jq .

# 2.4 Obtener billetera específica (USDT)
echo -e "\n2.4 Obteniendo billetera USDT..."
curl -X GET http://localhost:8080/api/v1/wallets/USDT \
  -H "Authorization: Bearer $TOKEN" | jq .

# 2.5 Obtener historial de transacciones
echo -e "\n2.5 Obteniendo historial de transacciones..."
curl -X GET http://localhost:8080/api/v1/transactions \
  -H "Authorization: Bearer $TOKEN" | jq .

# 2.6 Depositar fondos (BOB)
echo -e "\n2.6 Realizando depósito..."
curl -X POST http://localhost:8080/api/v1/deposit \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "currency": "BOB",
    "amount": 1000.00,
    "payment_method": "transferencia_bancaria",
    "reference": "DEPOSITO_PRUEBA_001"
  }' | jq .

# ================================
# 3. PRUEBAS DE TRADING P2P
# ================================

echo -e "\n=== PROBANDO SERVICIO DE TRADING P2P ==="

# 3.1 Obtener tasas actuales
echo "3.1 Obteniendo tasas de cambio actuales..."
curl -X GET http://localhost:8080/api/v1/rates | jq .

# 3.2 Obtener todas las órdenes públicas
echo -e "\n3.2 Obteniendo todas las órdenes públicas..."
curl -X GET http://localhost:8080/api/v1/orders | jq .

# 3.3 Crear nueva orden de venta
echo -e "\n3.3 Creando nueva orden de venta..."
curl -X POST http://localhost:8080/api/v1/orders \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "order_type": "SELL",
    "currency_from": "USD",
    "currency_to": "BOB",
    "amount": 100.0,
    "rate": 6.90,
    "min_amount": 10.0,
    "max_amount": 100.0,
    "payment_methods": ["transferencia_bancaria", "qr_simple"]
  }' | jq .

# 3.4 Crear nueva orden de compra
echo -e "\n3.4 Creando nueva orden de compra..."
curl -X POST http://localhost:8080/api/v1/orders \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "order_type": "BUY",
    "currency_from": "BOB",
    "currency_to": "USD",
    "amount": 690.0,
    "rate": 6.85,
    "min_amount": 68.5,
    "max_amount": 690.0,
    "payment_methods": ["transferencia_bancaria"]
  }' | jq .

# 3.5 Obtener mis órdenes
echo -e "\n3.5 Obteniendo mis órdenes..."
curl -X GET http://localhost:8080/api/v1/user/orders \
  -H "Authorization: Bearer $TOKEN" | jq .

# 3.6 Obtener mis estadísticas de trading
echo -e "\n3.6 Obteniendo mis estadísticas de trading..."
curl -X GET http://localhost:8080/api/v1/user/stats \
  -H "Authorization: Bearer $TOKEN" | jq .

# 3.7 Obtener libro de órdenes
echo -e "\n3.7 Obteniendo libro de órdenes..."
curl -X GET http://localhost:8080/api/v1/orderbook | jq .

# ================================
# 4. PRUEBAS DE GESTIÓN DE ÓRDENES
# ================================

echo -e "\n=== PROBANDO GESTIÓN DE ÓRDENES ==="

# 4.1 Obtener orden específica (reemplazar ID_ORDEN con ID real de respuestas anteriores)
echo "4.1 Obteniendo orden específica..."
# ID_ORDEN="REEMPLAZAR_CON_ID_REAL"
# curl -X GET http://localhost:8080/api/v1/orders/$ID_ORDEN \
#   -H "Authorization: Bearer $TOKEN" | jq .

# 4.2 Actualizar orden (reemplazar ID_ORDEN con ID real)
echo -e "\n4.2 Actualizando orden..."
# curl -X PUT http://localhost:8080/api/v1/orders/$ID_ORDEN \
#   -H "Content-Type: application/json" \
#   -H "Authorization: Bearer $TOKEN" \
#   -d '{
#     "rate": 6.95,
#     "amount": 90.0
#   }' | jq .

# 4.3 Cancelar orden (reemplazar ID_ORDEN con ID real)
echo -e "\n4.3 Cancelando orden..."
# curl -X DELETE http://localhost:8080/api/v1/orders/$ID_ORDEN \
#   -H "Authorization: Bearer $TOKEN" | jq .

# ================================
# 5. PRUEBAS DE EJECUCIÓN DE TRADING
# ================================

echo -e "\n=== PROBANDO EJECUCIÓN DE TRADING ==="

# 5.1 Ejecutar intercambio (reemplazar ID_ORDEN con ID real)
echo "5.1 Ejecutando intercambio..."
# curl -X POST http://localhost:8080/api/v1/trade \
#   -H "Content-Type: application/json" \
#   -H "Authorization: Bearer $TOKEN" \
#   -d '{
#     "order_id": "REEMPLAZAR_CON_ID_ORDEN",
#     "amount": 50.0,
#     "payment_method": "transferencia_bancaria"
#   }' | jq .

# ================================
# 6. VERIFICACIONES DE SALUD
# ================================

echo -e "\n=== VERIFICACIONES DE SALUD ==="

# 6.1 Salud del Gateway
echo "6.1 Verificación de salud del Gateway..."
curl -X GET http://localhost:8080/health | jq .

# ================================
# INSTRUCCIONES:
# ================================
# 
# 1. Primero, asegúrate de que todos los servicios estén ejecutándose:
#    docker compose up -d
#
# 2. Reemplaza TU_TOKEN_DE_ACCESO con el token real del paso 1.2
#
# 3. Para las pruebas de gestión de órdenes (sección 4), reemplaza ID_ORDEN con IDs reales de órdenes de las respuestas de la sección 3
#
# 4. Algunas pruebas pueden fallar si hay fondos insuficientes o estados inválidos - esto es normal
#
# 5. Para ejecutar todas las pruebas automáticamente, guarda este archivo y ejecuta:
#    bash api_tests.txt
#
# 6. O ejecuta comandos individuales copiándolos y pegándolos
#
# Nota: Asegúrate de que jq esté instalado para formateo JSON:
#    sudo apt-get install jq  # Ubuntu/Debian
#    brew install jq          # macOS