# docker-compose.yml

services:
  # API Gateway
  gateway:
    build: 
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: p2p-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - AUTH_SERVICE_URL=http://auth:3001
      - P2P_SERVICE_URL=http://p2p:3002
      - WALLET_SERVICE_URL=http://wallet:3003
      - REDIS_URL=redis:6379
    depends_on:
      - auth
      - p2p
      - wallet
      - redis
    networks:
      - p2p-network
    restart: unless-stopped

  # Auth Service
  auth:
    build: 
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: p2p-auth
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRY=15m
      - REFRESH_TOKEN_EXPIRY=168h
    depends_on:
      - postgres
      - redis
    networks:
      - p2p-network
    restart: unless-stopped

  # P2P Engine Service
  p2p:
    build: 
      context: ./services/p2p
      dockerfile: Dockerfile
    container_name: p2p-engine
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - p2p-network
    restart: unless-stopped

  # Wallet Service
  wallet:
    build: 
      context: ./services/wallet
      dockerfile: Dockerfile
    container_name: p2p-wallet
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_SECRET=${PAYPAL_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - BANK_LISTENER_URL=http://python-listener:8000
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
    depends_on:
      - postgres
      - redis
      - python-listener
    networks:
      - p2p-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build: ./frontend
    container_name: p2p-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    depends_on:
      - gateway
    networks:
      - p2p-network
    restart: unless-stopped

  # Python Bank Listener Service
  python-listener:
    build: 
      context: ./python-listener
      dockerfile: Dockerfile
    container_name: p2p-python-listener
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
    volumes:
      - ./python-listener/notifications.json:/app/notifications.json
    networks:
      - p2p-network
    restart: unless-stopped

  # Bank Listener Service (Go Service)
  bank-listener:
    build: 
      context: ./services/bank-listener
      dockerfile: Dockerfile
    container_name: p2p-bank-listener
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
      - WEBHOOK_SECRET=your-webhook-secret
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - PYTHON_LISTENER_URL=http://python-listener:8000
    depends_on:
      - postgres
      - python-listener
    networks:
      - p2p-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: p2p-postgres
    environment:
      - POSTGRES_USER=p2padmin
      - POSTGRES_PASSWORD=p2psecure123
      - POSTGRES_DB=p2p_bolivia
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - p2p-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: p2p-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - p2p-network
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: p2p-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - p2p-network
    restart: unless-stopped

  # ================================
  # PHASE 3 SERVICES
  # ================================

  # MinIO for file storage (KYC documents, evidence files)
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - p2p-network
    restart: unless-stopped

  # KYC Service
  kyc-service:
    build:
      context: ./services/kyc
      dockerfile: Dockerfile
    container_name: kyc-service
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=3005
    ports:
      - "3005:3005"
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      timeout: 5s
      retries: 3

  # Dispute Service
  dispute-service:
    build:
      context: ./services/dispute
      dockerfile: Dockerfile
    container_name: dispute-service
    depends_on:
      - postgres
      - redis
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=3006
    ports:
      - "3006:3006"
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/health"]
      timeout: 5s
      retries: 3

  # Chat Service
  chat-service:
    build:
      context: ./services/chat
      dockerfile: Dockerfile
    container_name: chat-service
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=3007
    ports:
      - "3007:3007"
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3007/health"]
      timeout: 5s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: analytics-service
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=p2padmin
      - DB_PASSWORD=p2psecure123
      - DB_NAME=p2p_bolivia
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=3008
    ports:
      - "3008:3008"
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3008/health"]
      timeout: 5s
      retries: 3

networks:
  p2p-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data: